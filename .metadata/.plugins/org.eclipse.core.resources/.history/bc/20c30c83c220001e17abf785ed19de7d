package com.aurionpro.test;

import com.aurionpro.model.*;
import java.util.Scanner;

public class AccountTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Account account = new Account(1, "Siddhant", 10000, AccountType.SAVINGS);
		System.out.println(account);
		account.deposit(2000);
		System.out.println(account);
		if(account.withdraw(33000)==true) {
			System.out.println("Transaction is carried out successfully");
			System.out.println(account);
		}
		else {
			System.out.println("Insufficient Funds");
		}
		
		
		
		// for(Account acc : accounts) {
		// System.out.println(acc);
		// }

		Account highestBalanceAccount = findHighestBalanceAccount(accounts);
		System.out.println("Account woth Highest Balance : " + highestBalanceAccount);

		Account highestCurrentBalanceAccount = findHighestBalanceAccountInAccountType(accounts, AccountType.CURRENT);
		System.out.println("Highest Balance in Current Account : " + highestCurrentBalanceAccount);

		Account highestSavingsBalanceAccount = findHighestBalanceAccountInAccountType(accounts, AccountType.SAVINGS);
		System.out.println("Highest Balance in Savings Account : " + highestSavingsBalanceAccount);

		double sumofAllAccounts = findSumBalanceAccount(accounts);
		System.out.println("Account woth Highest Balance : " + sumofAllAccounts);

		double sumofAccountsBalance = findSumBalanceAccountType(accounts, AccountType.SAVINGS);
		System.out.println("Account with Savings Highest Balance : " + sumofAccountsBalance);
		
		double sumofAccountsBalance1 = findSumBalanceAccountType(accounts, AccountType.CURRENT);
		System.out.println("Account with Current Highest Balance : " + sumofAccountsBalance1);

	}

	private static double findSumBalanceAccountType(Account[] accounts, AccountType type) {
		// TODO Auto-generated method stub
		double sum = 0;
		for (int i = 0; i < accounts.length; i++) {
			if (accounts[i].getAccountType().equals(type)) {
				sum += accounts[i].getBalance();
			}
		}
		return sum;
	}

	private static double findSumBalanceAccount(Account[] accounts) {
		// TODO Auto-generated method stub
		double sum = 0;
		for (int i = 0; i < accounts.length; i++) {
			sum += accounts[i].getBalance();
		}
		return sum;
	}

	private static Account findHighestBalanceAccount(Account[] accounts) {
		Account maxAccount = accounts[0];

		for (int i = 0; i < accounts.length; i++) {
			if (accounts[i].getBalance() > maxAccount.getBalance()) {
				maxAccount = accounts[i];
			}
		}
		return maxAccount;
	}

	private static Account findHighestBalanceAccountInAccountType(Account[] accounts, AccountType type) {
		Account maxAccount = null;

		for (int i = 0; i < accounts.length; i++) {
			if (maxAccount == null && accounts[i].getAccountType().equals(type)) {
				maxAccount = accounts[i];
			}

			if (maxAccount != null) {
				if (accounts[i].getBalance() > maxAccount.getBalance() && accounts[i].getAccountType().equals(type)) {
					maxAccount = accounts[i];
				}
			}
		}
		return maxAccount;
	}

	// private static void setAccountDetails(Account account) {
	// Scanner sc = new Scanner(System.in);
	// System.out.println("Enter the ID : ");
	// account.setId(sc.nextInt());
	//
	// System.out.println("Enter the Name :");
	// account.setName(sc.next());
	//
	// System.out.println("Enter the Balance :");
	// account.setBalance(sc.nextInt());
	//
	// System.out.println("Enter the Account Type :");
	// try {
	// account.setAccountType(AccountType.valueOf(sc.next().toUpperCase()));
	// } catch (Exception e) {
	// account.setAccountType(AccountType.SAVINGS);
	// }
	//
	// }
	//
	// private static void printDetails(Account account) {
	// System.out.println("Account Id : " + account.getId());
	// System.out.println("Account Name : " + account.getName());
	// System.out.println("Account Balance : " + account.getBalance());
	// System.out.println("Account Type : " + account.getAccountType());
	//
	// }
	//
	//

}
